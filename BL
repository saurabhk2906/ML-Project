{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy import interpolate\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.patches import Polygon "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class BuckleyLev():\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.params = {\n",
    "            #non wetting phase viscosity\n",
    "            \"viscosity_o\": 1.e-3,\n",
    "            #wetting phase viscosity\n",
    "            \"viscosity_w\": 1.e-3,\n",
    "            #initial water sat\n",
    "            \"initial_sw\":0.2,\n",
    "            #residual water saturation, Swirr\n",
    "            \"residual_w\":0.5,\n",
    "            #residual oil saturation, Sor\n",
    "            \"residual_o\":0.3,\n",
    "            #connate water saturation \n",
    "            #water rel perm at water curve end point\n",
    "            \"krwe\":1,\n",
    "            #oil rel perm at oil curve end point\n",
    "            \"kroe\": 0.99,\n",
    "            #dimless velocity results\n",
    "            'vd_array':[],\n",
    "            #porosity\n",
    "            'poro':0.24,\n",
    "            #water injection rate units TBD\n",
    "            \"inject_rate\":20,\n",
    "            #cross sectional area units TBD\n",
    "            \"x-area\":30\n",
    "        }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def k_rw(self,sw):\n",
    "    #water relative perm calculation for a given water saturation \n",
    "    p = 11.174\n",
    "    return ((self.params['krwe']))*sw**p\n",
    "\n",
    "BuckleyLev.k_rw = k_rw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def k_rn(self,sw):\n",
    "    #oil relative perm calculation for a given water saturation \n",
    "    q = 3.326\n",
    "    return ((1.-self.params['kroe']*sw)**q)\n",
    "\n",
    "BuckleyLev.k_rn = k_rn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def fractional_flow(self,sw):\n",
    "    #returns the fractional flow\n",
    "    \n",
    "    return 1./(1.+((self.k_rn(sw)/self.k_rw(sw))*(self.params[\"viscosity_w\"]/self.params[\"viscosity_o\"])))\n",
    "\n",
    "BuckleyLev.fractional_flow = fractional_flow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def fractional_flow_deriv(self,sw):\n",
    "    #calculate derivative of fractional flow - dFw/dSw - Vsh\n",
    "    \n",
    "    f_deriv = (self.fractional_flow(sw+0.0001) - self.fractional_flow(sw))/0.0001\n",
    "    \n",
    "    return f_deriv\n",
    "\n",
    "BuckleyLev.fractional_flow_deriv = fractional_flow_deriv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def fractional_flow_2deriv(self,sw):\n",
    "    f_2deriv = ((self.fractional_flow(sw+0.01))-2*(self.fractional_flow(sw))-self.fractional_flow(sw-0.01))/((0.01)**2)\n",
    "    return f_2deriv\n",
    "\n",
    "BuckleyLev.fractional_flow_2deriv = fractional_flow_2deriv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def plot_fractional_flow_deriv(self):\n",
    "    #plot the derivative dFw/dSw - Vsh vs Sw\n",
    "    y = np.linspace(self.params[\"residual_w\"]+1e-3,(1-self.params[\"residual_o\"]+1e-3),50)\n",
    "    x = [self.fractional_flow_deriv(i) for i in y ]\n",
    "    \n",
    "    plt.plot(x,y)\n",
    "    plt.title('Derivative of fractional flow curve')\n",
    "    plt.xlabel('dfw/dSw')\n",
    "    plt.ylabel('Sw')\n",
    "    plt.show()\n",
    "    \n",
    "BuckleyLev.plot_fractional_flow_deriv=plot_fractional_flow_deriv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def sw_at_shock_front(self): \n",
    "    #first find range to search in by looking where 2nd derivative is negative (where curve turns)\n",
    "    \n",
    "    sw_start = 1.-self.params['residual_o']\n",
    "    sw_end = self.params['residual_w']\n",
    "    \n",
    "    \n",
    "    for sw in np.arange(self.params['residual_w']+1.e-9, 1.-self.params['residual_o'],0.001):\n",
    "        if (self.fractional_flow_2deriv(sw)< -1.e-2 and sw < sw_start):\n",
    "            #i.e. we are below sw_start and the grad is negative - update upper limit\n",
    "            sw_start = sw\n",
    "        if (self.fractional_flow_2deriv(sw)< -1.e-2 and sw > sw_end):\n",
    "            # i.e. we are above sw_end and the gradient is negative - update lower limit\n",
    "            sw_end = sw\n",
    "        \n",
    "        \n",
    "    sw_at_front = 0.\n",
    "    current_min = 1000.\n",
    "        \n",
    "    #find where finite difference approximation (almost) equals the continuous value of the function\n",
    "    for sw in np.arange(sw_start,sw_end, 0.0001):\n",
    "        \n",
    "        current_diff = abs(self.fractional_flow_deriv(sw)-self.fractional_flow(sw)/sw)\n",
    "        #print( 'grad func',self.fractional_flow_deriv(sw),sw,self.fractional_flow(sw)/sw)\n",
    "        #print('approx',self.fractional_flow(sw)/sw, sw)\n",
    "        if current_diff < current_min:\n",
    "            #print('sw at front',current_min, sw,current_diff)\n",
    "            current_min = current_diff\n",
    "            sw_at_front = sw\n",
    "            \n",
    "            current_min = current_diff\n",
    "                    \n",
    "    return sw_at_front\n",
    "BuckleyLev.sw_at_shock_front = sw_at_shock_front"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def plot_fractional_flow(self):\n",
    "    #plot the sw vs fractional flow\n",
    "    \n",
    "    #x = np.linspace(self.params[\"residual_w\"]+1e-3,(1-self.params[\"residual_o\"]+1e-3),100)\n",
    "    x = np.linspace(self.params[\"residual_w\"]+1e-3,(1),100)\n",
    "    y = [self.fractional_flow(i) for i in x ]\n",
    "    \n",
    "    plt.plot(x,y)\n",
    "    \n",
    "    #sw_at_front = self.sw_at_shock_front()\n",
    "    #plt.plot([sw_at_front],[self.fractional_flow(sw_at_front)],'ro')\n",
    "    \n",
    "    plt.title('Fractional flow as a function of water saturation')\n",
    "    plt.xlabel('Sw')\n",
    "    plt.ylabel('Fractional flow')\n",
    "    plt.ylim([0,1.1])\n",
    "    plt.xlim([0,1])\n",
    "    \n",
    "    #add limiting fractional flow lines\n",
    "    plt.hlines(y[len(y)-1],0,1,linestyles='dashed',lw=2, colors='0.4')\n",
    "    plt.annotate('fw max: %.4f' % y[len(y)-1],xy=(0.08,0.95))\n",
    "    \n",
    "    \n",
    "    plt.show()\n",
    "    print(y[len(y)-1])\n",
    "    \n",
    "BuckleyLev.plot_fractional_flow = plot_fractional_flow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nPn269+rVK7ZtE4nL5MnuAwe6t2nj/r//6z5/ftIRxSP67qzT926etZblh/POO48PPviAwYMHc/PN\nN9OzZ0/WrFkDQKtWrfjLX/4CwBlnnMHEiRM3e+2UKVMoKSnhhBNOoEuXLlx++eU88sgj9OrViwMO\nOIAPP/wQgHHjxtG7d2+++c1vMmDAAD777DMALr74Yq6++moAxo8fn9XN1/v160ezZs1qLDN27FjO\nOOMMAIYNG8akSZOq1jFgwACaN2/OLrvswoABA3j++ecBmDRpEt/5zneqtvWpp56qWtYPfvADAHr1\n6sXq1atZtmxZrXGK5IPXX4djjoFzzoGTT4aPPoLf/S70K8jmlCDSuPPOO2nXrh2lpaVcfPHF9OnT\nh6lTp/Luu+/SuXPnqlPMpk2bxhFHHLHF62fNmsXo0aOZPXs2Dz/8MPPnz+ff//43Z511Fn/6058A\nOPLII5k+fTozZ87klFNO4frrrwfg2muv5dFHH6W0tJSLLrqIBx54AIBnnnmGUaNG1XmblixZwp57\nhhPGGjduTPPmzVmxYsVm8wHatWvHkiVLWL58OS1atKBR1OPWvn17lixZssWyUl8jks/WrIGf/hSG\nDIFhw2D2bPjRj8JZRZJe0qe55i3/qmmLPn36MGXKFDp27Mi5557LPffcw9KlS2nZsiU77LDDFq89\n9NBD2X333QHo3LkzAwYMAGD//fentLQUgEWLFnHyySfzn//8h7KyMjp16gTADjvswOjRo+nbty+3\n3HILe+21FwBDhw5l6NCh9bp99VFGpBBMmQJnnAHf+lZIDC1bJh1RYVANIgt9+/bl5Zdf5pVXXqFf\nv360atWKxx9/nCOPPDJt+e1TfpI0atSoarpRo0ZVHb0XXHABF154IbNmzeKuu+5i/fr1Va+ZNWsW\nrVq1qtdf5e3bt2fRojBovby8nDVr1tCyZUvatWu3WYf14sWLadeuHbvuuiurV6+moqJis/kQagyV\ny6r+nEg+cYdrr4VTT4Xbb4d77lFy2BpKEFlo3749n3/+OfPnz2evvfaiT58+3HDDDfTt27fOy1yz\nZk3VQL8HH3ywav7ChQu56aabeOONN3juued49dVXs1peao0nnaFDh1at57HHHqN///4ADBw4kAkT\nJrB69WpWrlzJhAkTGDgwXF+xX79+PPbYY1UxHn/88QAcd9xxVWc7TZ8+nV122YXWrXUJLckv69fD\n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\niKT1/xR6TjWqiklNAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11082d190>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.999999777157\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYkAAAEZCAYAAABiu9n+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xm8lGX9//HXGwUU3LJccMPccilNTdSEOIgpIAqmqbjV\n136l/rLl20+zvi3ytbLdFsvUcskVF8QVBUQOSC4ogqKCWCoBosgqBCrC5/fHdR8ZjmfOPueeOef9\nfDzmwczcy3xmgHnPdV33fd2KCMzMzOrSKe8CzMysfDkkzMysKIeEmZkV5ZAwM7OiHBJmZlaUQ8LM\nzIpySFi9JPWWNLNE+/6+pKtLse8GXvc6SUskPVFk+U8lvSXp9Tao5TRJD7XB61wn6ZJ6ln/wniX1\nlLROkr8fDPk8ifZD0mvAtsAaYC3wInAjcHXk/BctqS9wU0TsnHMdvYFbgL0i4p06lu8MvATsHBGL\nW/m1ewKvAhtHxLrW3HcjXvs6YG5E/LiOZRu856zOV4DObV2nlR//UmhfAjg2IrYEegK/AC4CrmnO\nziRt1Iq1iVRf3nYFXqsrIDI9gUXFAqKFn0nNZ6AW7KMU6n3P5cytndLzB9z+CCAiVkTE/cApwJck\n7QsgqYuk30iaI2mBpCskdc2W9ZU0V9J3JS0Arq15Llv+XUl3bPBi0h8k/T67/2VJL0p6W9I/JX0t\ne74bMBrYQdKKbPn2ki6WdEO2zmhJ/7fWvqdLGprd31vSWEmLJc2U9MWiH4DUQ9I92bqzJf2f7Pmz\ngb8Ch2c1XFxru/7A2KzOtyVdW9D1crakOcD4bN3bs89vqaTqms83W7aJpN9Kek3SMkmTJG0CTMxW\nWZbt/1BJX5L0aMG2n5U0Jdvvk5IOL1g2QdIlkiZn2z8kaeuC5UVrquez+tB7bsLn2VXSqpoaJP1A\n0hpJm2WPL5F0WZHX/Uj2+c7P9ntX9vwGn0f23DpJu2X3r8v+zT4gaQVwQfaeVbD+CZKeze5L0vey\nf49vSRohaauGPhcrEBG+tZMbqSvjyDqenwOck93/HXA3sCXQHbgH+Fm2rC+pq+pSoDPQNXvu39ny\nXYCVQPfscSfgdeCQ7PFAYNfsfh/gP8CnC/b971p1XQzckN0/E5hcsGxfYAmwMdAN+DdwFikEDwAW\nAnsX+RwmAZdn76Fm3aps2ZeASfV8hhvUSfqVvQ64HtgU6Jo9/+Wsrs7AZcC0gm3+DDwCbJ/Ve1i2\nXk9SN6AK1v2gHuAj2Xs+LftsT80efyRbPgF4Gdg9+7uZAFxasK/6aroOuKQJ73kt0KkRn2c1cEJ2\nf0xW3zHZ44nAkCKv+QBwK7AFsBHQp9jfT1bLbgXvYylwWPa4a/aa/QvWvx24MLv/LeAxoEdW/1+A\nW/L+v1pJt9wL8K0V/zKLh8TjwPez+yuBjxcsOxx4JbvfF3iH1BdNwXOFXyCTgDOy+58HXq6nnlHA\nN+raT/ZcYUhsBqwg9YsD/BT4W3b/ZGBirW2vBH5Ux2vuRAq6bgXPXQpcm91vTkisBXrWs81WpCDZ\nnBQKq4BP1rHeBl++tesBzgCeqLXNY8BZ2f0JwP8ULDsPGN1QTdnjZoUEsHMDn+clwO9JX/QLgG9k\ny7tmn8NH6ni97YH3gS3qWFZXSKxjw5C4vtbynwDXZPc3J/0b3yl7/CLQr2DdHsB7hX8HvtV/c3dT\nx7AjsETSNqRfmlOVju5ZAjwIfLRg3bciYk09+7oVGJbdH0YaBAZA0kBJj2fdB0tJLYuPNabAiFhJ\n6pI6tWDfN2X3ewKH1dSc7fs00pdNbTsASyJiVcFzc0ifQUvMq7kjqZOkX2RdGMtI4Ryk9/ox0hfk\nK814jR2yWgvVrv2NgvurSOHaUE0t0YP6P8+JQD/gIOA5YBxQRWo9vRwRS+vY587ZPt9uZk1zaz2+\nBThBUmfgC8DUiKj5++oJjCr49/4iKfS2a+ZrdzgOiXZO0iGkL59HgUWkL5b9ImLr7LZVpIHuGg0N\nLt8BVEnaETiBLCQkdQHuBH4FbBMRHyEFUE1fcWMGrW8FTpN0GKlbpzp7fi5QXVDzRyJii4j4eh37\neB3YWlL3gud2AeY34vXrU1j/acBxpFbbVqTBcGW3RaTW2O4N7KMur2f7KtTY2k+vp6aWaOjzfAz4\nBOnfwsSImJUtH8T6MZja5mb73KKOZf8h/ZABQFJdPwQ2+BwjYiYpuAZR64cLqZtyYK1/O90jYkGR\n2qwWh0Q7JWlzSYNJX7w3RsSLkdrbfwV+n7UqkLSjpKMbu9+IWET6z38dqZvqpWxRl+y2KCLWSRoI\nFO73TeCjRb4Yaowm/fK7BLit4Pn7gb0knSFpY0mdJX1G0t511DeP9MX182xgdX/gK6RDgZur9hft\n5sC7wNLsy/PnZF9c2Wd8HXBZNuDbSdJh2a/ct0hdJ3UFCKT3v6ekUyVtJOkUYB/gvkbUuFmxmpqp\n5gCIej/PiFgNTAW+zvpQeAw4lyIhERFvkH5AXCFpq+zvtE+2+FlgP0n7Kx1QcXEj38ctpPGHPqQf\nMjWuAi6VtAuApG0kHd+YD8ASh0T7c5+k5aRfUN8HfgOcXbD8IuCfwBNZt8RYYK8mvsYtQH/g5pon\nsu6ibwJ3ZM36U0mD4jXLXyIF1itZ0/9DvxAj4j3grmzftxQ8v5IUOKeSftm+Tjq8t0uR+oYBH8/W\nG0kau5jQxPe4QWm1Ht9A+nznA8+TvhQLXQDMAJ4CFme1dsq+UH8G/CP7DHpt8CIRS4DB2faLsj+P\nLeiyqe/LsqGamqrwtRr6PCeSxiSmFDzejDR+VcyZpHGJWaQfEN8CiIiXST8SxgOzSS3gxhgBfA4Y\nn32ONf5A+nc4Nvt/8RjQq47trYiSn0wnaQBpYKsTaXDpl7WWX0BqKgfp6IN9gI9FxDKlk8OWk359\nrYkI/+WambWhkoaE0okus0m/DF8n/bI6Neu3rGv9wcC3I+Ko7PErwMFFBr/MzKzESt3d1It0hMOc\n7IiZEcCQetYfRuqSqCHcJWZmlptSfwHvyIaHq82jyKGIkjYFBpD6PGsEME7SU5K+WrIqzcysThvn\nXUCB40hn3C4reO6IiFiQHYkzTtLMiJicU31mZh1OqUNiPumY6Ro7UfyY71PZsKuJmmOZI+ItSaNI\n3VcfCglJpR19NzNrhyKiwfNoSt3d9BSwh9IkaV1IQXBv7ZUkbUmaGuCegue6FUwU1p10COTzxV4o\n71PXm3u7+OKLc6/B9edfh+uvzFsl199YJW1JRMRaSeeTjsWvOQR2pqRz0uKoueDMUGBMpOPIa2xH\nOp0+sjpvjoixpazXzMw2VPIxiYh4iHTafuFzV9V6/Hfg77WeexX4dKnrMzOz4nx4ac6qqqryLqFF\nXH++XH++Kr3+xmgXly+VFO3hfZiZtRVJRBkMXJuZWQVzSJiZWVEOCTMzK8ohYWZmRTkkzMysKIeE\nmZkV5ZAwM7OiHBJmZlaUQ8LMzIpySJiZWVEOCTMzK8ohYWZmRTkkzMysKIeEmZkV5ZAwM7OiHBJm\nZlaUQ8LMzIpySJiZWVEOCTMzK8ohYWZmRTkkzMysKIeEmZkV5ZAwM7OiHBJmZlaUQ8LMzIpySJiZ\nWVEOCTMzK8ohYWZmRTkkzMysKIeEmZkV5ZAwM7OiHBJmZlaUQ8LMzIpySJiZWVElDwlJAyTNkjRb\n0kV1LL9A0jRJz0iaIel9SVs1ZlszMystRUTpdi51AmYD/YHXgaeAUyNiVpH1BwPfjoijmrKtpCjl\n+zAza28kERFqaL1StyR6AS9HxJyIWAOMAIbUs/4w4NZmbmtm1mG89hqsXVv61yl1SOwIzC14PC97\n7kMkbQoMAEY2dVszs47k3XfhyCPhiSdK/1obl/4lGu04YHJELGvOxsOHD//gflVVFVVVVa1TlZlZ\nmbniCth3XzjiiMZvU11dTXV1dZNfq9RjEocBwyNiQPb4e0BExC/rWPcu4PaIGNGMbT0mYWYdwpIl\nsPfeUF2dgqK5GjsmUeqQ2Ah4iTT4vACYAgyLiJm11tsSeAXYKSJWN2XbbF2HhJl1CN/4Brz3Hlx1\nVcv209iQKGl3U0SslXQ+MJY0/nFNRMyUdE5aHFdnqw4FxtQERH3blrJeM7NyFQHDh8O4cfDoo233\nuiVtSbQVtyTMrD2LgO9+F8aMSSGx3XYt32dZtCTMzKxl1q1LXUxTpqRxiK23btvXd0iYmZWphQvh\n3HPTnw8/DFtu2fY1eO4mM7MyEwG33w777w977pm6mPIICHBLwsysrLz5Jnz96/DCC3DPPXDoofnW\n45aEmVkZiIBbb4UDDoA99oBp0/IPCHBLwswsVxEwfjz88IewejXcey/06pV3Ves5JMzMcjJ5cgqH\nBQvgf/8XTj4ZOpVZ/45DwsysjT39NPzoRzBrFlx8MZxxBmxcpt/GZVqWmVn7EpFmbf31r9M5Dz/4\nQRqY7tIl78rq55AwMyuhd99Nh7P+8Y+wdCl885tw882w6aZ5V9Y4npbDzKwEFiyAK69ME/EdcEAK\nh4EDy2fMoVyuTGdm1qFMmZLGGPbbD956Cx55JM25dOyx5RMQTeGWhJlZCy1Zks5xuO46WLw4zbV0\n9tmw1VZ5V1ZcWVxPoq04JMysrb3/fmohXH99mjZj0CD48pehf3/YaKO8q2uYQ8LMrAReeAH+/ne4\n6SbYddcUDCefXN6thrp4qnAzs1ayaFE6Qun662H+fDjrrDTWsPfeeVdWem5JmJnVYelSGDUKbrst\nnd8wcGBqNXz+85XRndQQdzeZmTXR8uXpBLfbbktTZhx1FJxySjoyqXv3vKtrXQ4JM7NGWLEC7rsv\nBcOECdCvXwqG446DzTfPu7rScUiYmRWxbBk88ADcdVe64tsRR6RgGDKk8gagm8shYWZWYP78NA33\nqFFpjKGqCoYOTcHw0Y/mXV3bc0iYWYf30kspFO6+G2bPTmMLQ4fCMcfAZpvlXV2+HBJm1uGsW5em\n4b777hQOb7+dQuGEE6BvX+jcOe8Ky4dDwsw6hP/8J13Z7f770zjDFlukUDjhBDj44MqcL6ktOCTM\nrN2aMycFwv33p0NVe/WCwYNTd9Kee+ZdXWVwSJhZu7F2LTz5ZAqF++9P03APGpSC4eijYcst866w\n8jgkzKyiLV2aJs574AEYPRp22CGFwuDBqeXQHs56zpNDwswqSgQ8+yw8+GAKhWefhd6913cj9eyZ\nd4Xti0PCzMre8uWptfDgg+nWvXvqRho4MB2NVCmX+KxEDgkzKzsRMGNGaik8+CA880xqLQwcmG4e\ndG47DgkzKwvLlqWpLx56KN022SQFwqBBqbXQrVveFXZMDgkzy8W6dTB16vpQmDEjtRYGDEi3vfbK\nu0IDh4SZtaE33oCxY1MojBsH2267PhT69EmtBysvDgkzK5k1a+Cxx1IojBkDr76aru08YECaF2nn\nnfOu0BrikDCzVvXKKykQHnoIqqvTIPPAgSkUDj3U8yJVmrIJCUkDgN8DnYBrIuKXdaxTBfwO6Ay8\nFRH9sudfA5YD64A1EdGryGs4JMxa2cqV6SI8Y8ak24oVKRCOOSZdwnObbfKu0FqiLEJCUidgNtAf\neB14Cjg1ImYVrLMl8BhwdETMl/SxiFiULXsFODgiljbwOg4JsxaqOZmtJhSeegoOOWR9MOy/vyfL\na08aGxIbl7iOXsDLETEnK2oEMASYVbDOacDIiJgPUBMQGZFaIGZWAm+9lQaaa4Jh881TIPz3f6fL\neHb0ay5Y6UNiR2BuweN5pOAotBfQWdIEYDPgjxFxY7YsgHGS1gJXR8RfS1yvWbu2Zk2aKK9mwHn2\n7HSFtmOOgR//GHbfPe8KrdyUOiQaY2PgIOBIoDvwuKTHI+KfwBERsUDSNqSwmBkRk/Ms1qzSzJmz\nfsD5kUdgt91SKPzmN3D44dClS94VWjkrdUjMB3YpeLxT9lyhecCiiHgHeEfSJOAA4J8RsQAgIt6S\nNIrUCqkzJIYPH/7B/aqqKqqqqlrpLZhVllWrYNKk9a2FRYvSdNonnABXXAHbb593hZaH6upqqqur\nm7xdqQeuNwJeIg1cLwCmAMMiYmbBOnsDlwMDgK7Ak8ApwGtAp4hYKak7MBb434gYW8freODaOqwI\nmDVr/RnOjz0GBx6YWgsDBqT7HnC22spi4Doi1ko6n/QFX3MI7ExJ56TFcXVEzJI0BngOqBl7eFHS\nx4FRkiKr8+a6AsKsI1qxInUdPfhgCoa1a9M5C+ecA7ff7ovwWOvxyXRmFaBm9tSHHkrB8PTTcNhh\n66e+2HdfUIO/Cc3WK4vzJNqKQ8Lao5rZU2taCzWzpw4YkI5I8uGp1hIOCbMKEwHPP5+utTB6NEyb\ntv5aCwMGwB57uLVgrcchYVYBVq6E8ePXB0PnzulSnYMGpdaCr8xmpeKQMCtDEekEtppQeOKJNLYw\naFC67bWXWwvWNhwSZmXinXfSrKkPPJCC4b331ofCkUemqTDM2lpZHAJr1lG98UYKhPvuS4eqfupT\nqRtp1Kh0360FqxRuSZi1ggiYPh3uvz/dZs9OZzkPHpwGnj/2sbwrNNuQu5vMSmz16jToXBMMm2wC\nxx2Xbr17e04kK2/ubjIrgYULUyDcc0+6IM9BB6XWwvjxHnS29sktCbMGvPxyCoW7707nMXz+8zB0\naOpG2nrrvKszax53N5k107p16apsNcGwdCkMGZJu/fqlbiWzSueQMGuCd99NRyHdcw/cey9stVVq\nLQwZki7h6VlUrb3xmIRZA1atSnMi3XVXOodh333TNRcmToQ998y7OrPy4JaEdShvv50CYeTIdG3n\nz3wGTjwxhUOPHnlXZ9Z2WrW7SdK/gCeAR4FHI+KFlpfYehwSVp8lS1IX0siRqZXQp08KhuOP9/kL\n1nG1dkh0BQ4F+gBHAJ8AnouIE1paaGtwSFhtixenbqQ77oAnn4T+/VMwDB7sC/KYQeuPSawF1mR/\nrgMWZjezsrF8eToaacSIdAnPY46Br341TYXRvXve1ZlVpsa2JFYBM4DLgIcjYnGpC2sKtyQ6rpUr\n0/xII0akSfT69YNTTklnPfuiPGbFtXZ30xCgN9ALeA94DJgUEeNbWmhrcEh0LKtXp8nzbrsNxoyB\nI45IwTB0qLuSzBqrJOdJSNobGAh8G9g2IsrikigOifZv7do0DcaNN6ZB6IMPhlNPTUclffSjeVdn\nVnlauyUxEjgA+BcwiXSU05SIeKelhbYGh0T7FAHPPZeC4ZZbYIcd4MwzU6th++3zrs6ssrXKwLWk\nQ4C5wM+BacAZwInAdsDzQFmEhLUv8+bBzTfDTTfBihVw+ulpAr199sm7MrOOp96WhKRngKMiYomk\nzwEjgG8Anwb2iYiT2qbM+rklUflWrIA770ythmefTYernnlmGm/wlBhmra+1DoHdKCKWZPdPAa6O\niJHASEnTW1qkdWwRMHkyXHNNOnS1b1/4+tfTFdw8iZ5ZeWgwJCRtHBHvA/2BrzVhW7M6zZ8PN9wA\n114LnTvDV74Cv/wlbLdd3pWZWW0NfdHfCkyUtAhYTRqwRtIewPIS12btyHvvpfMZrr0WHn8cvvjF\nNObQq5cv1GNWzho8uknSYUAPYGxE/Cd7bi9gs4h4pvQlNsxjEuXrpZfgqqtSIOy3H5x9NnzhCz4D\n2ixvrTYtR0Q8Ucdzs5tbmLV/a9ak6zL85S/pSm5nn51aD7vvnndlZtZUHlewVjN3Llx9dRqI3nNP\nOO+8dLJb1655V2ZmzeWQsBZZty5NjXHllfDoo+mchnHjUteSmVU+h4Q1y4oVcN118Mc/pvmSzjsv\nnRXtsQaz9sUhYU3y2mtw+eVw/fXpGg033ACHH+4jlMzaK5/Lag2qOentpJPSxHqdOsEzz8Dtt8Nn\nP+uAMGvP3JKwotasSUHw+9/DsmXwrW+lFoSv02DWcTRpqvBy5fMkWtfq1emkt1//GnbdFS64AAYN\n8hxKZu1Ja1++1DqAZcvgiivSYPShh6arvR12WN5VmVmeSv7bUNIASbMkzZZ0UZF1qiRNk/S8pAlN\n2dZa7o034KKL0slus2alabnvuccBYWYlDglJnYA/AccA+wHDsqvbFa6zJfBnYHBEfBL4YmO3tZaZ\nPz/NurrvvrBqFUydmo5W8jkOZlaj1C2JXsDLETEnItaQrkcxpNY6pwEjI2I+QEQsasK21gxvvJEG\noT/1qXRew6xZ6bDWXXfNuzIzKzelDokdSVe2qzEve67QXsDWkiZIekrSmU3Y1ppg4cI0CL3vvmkQ\n+sUX4Ve/gm23zbsyMytX5TBwvTFwEHAk0B14XNLj+ZbUvixenI5U+utf4bTT0qR7O+yQd1VmVglK\nHRLzgV0KHu+UPVdoHrAoIt4B3pE0CTigkdt+YPjw4R/cr6qqoqqqqiV1twurV6dzHH7723Qi3LRp\nsMsuDW9nZu1PdXU11dXVTd6upOdJSNoIeIl0VbsFwBRgWETMLFhnb+ByYADQFXiSdKnUlxratmAf\nPk+iwLp16VrRP/pRuqjPz3+eZmU1M6tRFudJRMRaSecDY0njH9dExExJ56TFcXVEzJI0BngOWEu6\njvaLAHVtW8p624Nx4+DCC6Fbt3Sew2c/m3dFZlbJfMZ1O/HCC2lQ+p//hF/8Il39zXMqmVkxjW1J\neKKFCvf22/D//h/06wcDBqSwOPFEB4SZtQ6HRIWKgJtvhn32SdNpPP98OvehS5e8KzOz9qQcDoG1\nJpoxA84/H1auhJEjPX2GmZWOWxIVZNWq1LXUvz8MGwZTpjggzKy0HBIVYsKENI3Gm2+mcYdzz4WN\nNsq7KjNr79zdVOaWL4fvfhdGj4Yrr4Rjj827IjPrSNySKGP33w+f/GS6//zzDggza3tuSZShlSvT\nkUrV1Wnq7n798q7IzDoqtyTKzJQpcOCB6RDX6dMdEGaWL7ckysTatWmOpcsvhz//OU3IZ2aWN4dE\nGfj3v+H009OJcFOnwk475V2RmVni7qacjR2bZmo97rg0OZ8DwszKiVsSOVm3Dn72M/jLX+C226Bv\n37wrMjP7MIdEDpYsgTPPTJPzPf20rxJnZuXL3U1t7IUX4DOfgU98Ah55xAFhZuXNLYk2NGZMakFc\ndhmccUbe1ZiZNcwh0UauuAJ+8hO46y7o3TvvaszMGschUWJr18J3vpOOYvrHP2C33fKuyMys8RwS\nJfTuu3DaaWmSvscfh622yrsiM7Om8cB1iaxcCYMHQ6dO8MADDggzq0wOiRJYvBiOOgp69oQRI6Br\n17wrMjNrHodEK3vjjXRiXJ8+8Ne/+sJAZlbZHBKtaOFCOPJIOPlk+NWvQMq7IjOzlvHAdStZtCh1\nMZ10Evz4x3lXY2bWOhQRedfQYpIiz/exZAn07w8DBsCll7oFYWblTxIR0eC3lUOihVauTAHRpw/8\n+tcOCDOrDA6JNrBmDQwZAj16wN/+5oAws8rR2JDwwHUzRcC556ZguPJKB4SZtU8euG6m4cNhxgyY\nMAE6d867GjOz0nBINMPNN8ONN8ITT0D37nlXY2ZWOh6TaKKpU9NRTI88Ap/6VJu8pJlZq/OYRAks\nXAhf+EIag3BAmFlH4JBopPffhy9+Ec46C048Me9qzMzahrubGukHP0hdTaNHp5ldzcwqWWO7mzxw\n3QgPPwzXXw/TpjkgzKxj8VdeA958E770Jfj732HbbfOuxsysbZU8JCQNkDRL0mxJF9WxvK+kZZKe\nyW4/LFj2mqRnJU2TNKXUtdYWAV/5SgqJo45q61c3M8tfSbubJHUC/gT0B14HnpJ0T0TMqrXqpIg4\nvo5drAOqImJpKess5oYbYN48uOuuPF7dzCx/pR6T6AW8HBFzACSNAIYAtUOi2OCJyKlLbP58uPBC\nGDsWunTJowIzs/yV+gt4R2BuweN52XO1HS5puqQHJO1b8HwA4yQ9JemrpSy0UM28TOedB5/+dFu9\nqplZ+SmHo5umArtExCpJA4G7gb2yZUdExAJJ25DCYmZETK5rJ8OHD//gflVVFVVVVc0u6M474dVX\nYeTIZu/CzKysVFdXU11d3eTtSnqehKTDgOERMSB7/D0gIuKX9WzzKnBwRCyp9fzFwIqIuKyObVrt\nPImVK2GffdL8TJ/7XKvs0sys7JTLtBxPAXtI6impC3AqcG/hCpK2K7jfixRcSyR1k7RZ9nx34Gjg\n+RLXy09+Av36OSDMzKDE3U0RsVbS+cBYUiBdExEzJZ2TFsfVwEmSzgPWAKuBU7LNtwNGSYqszpsj\nYmwp6501C669Nk0BbmZmnpZjA0OHQu/ecMEFrVCUmVkZ87QcTTR5cpp2Y8SIvCsxMysfnpaDdMjr\nhRfCT38Km2ySdzVmZuXDIQHcey+sXg2nn553JWZm5aXDh0QEXHJJuma1Z3g1M9tQh/9aHD06XVDo\n+LpmjjIz6+A6dEjUtCJ+9CO3IszM6tKhvxonToTly9N1q83M7MM6dEhcdhl85ztuRZiZFdNhT6ab\nPTudODdnDmy6aYkKMzMrU+Uyd1PZ+sMf4JxzHBBmZvXpkC2JlSthl13g+edhhx1KWJiZWZlyS6Ie\nt94Kffs6IMzMGtIhQ+Kqq+BrX8u7CjOz8tfhQmL6dHjrLTj66LwrMTMrfx0uJG66Cc48EzbaKO9K\nzMzKX4cauF67FnbeGR55BPbeuw0KMzMrUx64rsP48bDjjg4IM7PG6lAhcdttMGxY3lWYmVWODtPd\ntGYN9OgBU6dCz55tVJiZWZlyd1MtEyfCbrs5IMzMmqLDhMRdd8GJJ+ZdhZlZZdk47wLaQgTcdx+M\nHZt3JWZmlaVDtCRmzIAuXXxUk5lZU3WIkLj/fjj2WFCDQzRmZlaoQ4TEQw/BoEF5V2FmVnna/SGw\nK1fC9tvDwoXQrVsbF2ZmVqZ8CGxm0iQ45BAHhJlZc7T7kHj4YTjqqLyrMDOrTO0+JKqroaoq7yrM\nzCpTux6TePvtdPW5xYuha9ccCjMzK1MekwAeewwOPtgBYWbWXO06JCZPht69867CzKxyteuQePJJ\nOPzwvKswM6tc7XZMYt062HprePll2GabnAozMytTHX5M4qWXUkg4IMzMmq/kISFpgKRZkmZLuqiO\n5X0lLZMbOHNaAAAGtElEQVT0THb7YWO3rc/TT6eT6MzMrPlKGhKSOgF/Ao4B9gOGSaprLtZJEXFQ\ndvtpE7et0zPPwEEHtfgtlFx1dXXeJbSI68+X689XpdffGKVuSfQCXo6IORGxBhgBDKljvbr6xRq7\nbZ2mTYMDD2xOyW2r0v+Ruf58uf58VXr9jVHqkNgRmFvweF72XG2HS5ou6QFJ+zZx2w+JgOnTKyMk\nzMzKWTlcmW4qsEtErJI0ELgb2KslO1yzBn77Ww9am5m1VEkPgZV0GDA8IgZkj78HRET8sp5tXgUO\nJgVFo7aVVPnH8ZqZtbHGHAJb6pbEU8AeknoCC4BTgWGFK0jaLiLezO73IgXXEkkNblujMW/UzMya\nrqQhERFrJZ0PjCWNf1wTETMlnZMWx9XASZLOA9YAq4FT6tu2lPWamdmG2sUZ12ZmVhoVfcZ1S062\ny5ukayS9Kem5vGtpDkk7SXpE0guSZkj6Zt41NYWkrpKelDQtq//ivGtqKkmdshNQ7827lqaS9Jqk\nZ7PPf0re9TSVpC0l3SFpZvZ/4NC8a2osSXtln/sz2Z/L6/v/W7Etiexku9lAf+B10vjHqRExK9fC\nGklSb2AlcENE7J93PU0laXtg+4iYLmkz0lFqQyrl8weQ1C07qm4j4B/ANyOiYr6wJP036SCPLSLi\n+LzraQpJrwAHR8TSvGtpDknXAxMj4jpJGwPdIuLtnMtqsux7dB5waETMrWudSm5JtOhku7xFxGSg\nIv+DAETEGxExPbu/EphJI89jKRcRsSq725U0Plcxv5gk7QQMAv6Wdy3NJCr0+0fSFkCfiLgOICLe\nr8SAyBwF/KtYQECF/iVlmn2ynbUuSbsCnwaezLeSpsm6a6YBbwDjIuKpvGtqgt8BF1JBwVZLAOMk\nPSXpq3kX00QfBxZJui7rsrla0qZ5F9VMpwC31rdCJYeElYGsq+lO4FtZi6JiRMS6iDgQ2Ak4tOBs\n/7Im6VjgzawlJ+qe1qbcHRERB5FaQ1/Pul8rxcbAQcCfs/ewCvheviU1naTOwPHAHfWtV8khMR/Y\npeDxTtlz1kayvtg7gRsj4p6862murKtgAjAg71oa6Qjg+Kxf/1agn6Qbcq6pSSJiQfbnW8AoUvdx\npZgHzI2Ip7PHd5JCo9IMBKZmfwdFVXJIfHCynaQupJPtKu0oj0r9FVjjWuDFiPhD3oU0laSPSdoy\nu78p8HmgIgbdI+J/ImKXiNiN9O/+kYg4K++6GktSt6wFiqTuwNHA8/lW1XjZyb9zJdVMH9QfeDHH\nkpprGA10NUF5zN3ULJV+sp2kW4Aq4KOS/g1cXDMQVgkkHQGcDszI+vUD+J+IeCjfyhqtB/D37OiO\nTsBtETE655o6iu2AUdl0OhsDN0fE2JxraqpvAjdnXTavAP+Vcz1NIqkbadD6aw2uW6mHwJqZWelV\ncneTmZmVmEPCzMyKckiYmVlRDgkzMyvKIWFmZkU5JMzMrCiHhFkRki6W9B1Jn8imVJ4q6eON3PYi\nSR+6kqKkFdmfkvSHbJry57Jpy3u29nswa6mKPZnOrA0NBe6IiEubsM0xwBfreL7mxKRTgB4R8SkA\nSTsA/2lRlWYl4JaEWQFJP5D0kqRJwCeA7sC3gfMkjZd0gaRvZOv+TtL47H4/STdl9zcHOkfEYkm7\nSnosu8DOTwpeqgfp2u0ARMTrEbFc0kmSfpvt51uS/pXd/7ikyW3wEZhtwCFhlpF0EHAysD9wLHAI\n6df9X4DfRUR/4FGgZsbSg4Hu2UWL+gATs+ePAsZn9/9Ami30AApCAbidNEnfM5J+I+nT2fOF++9N\nmpK6R639m7UZh4TZen2AURHxbkSsAGpmti2chHEqcHDWWngXeJwUJn1IX/CQZpN9MLt/BOmCWAA3\n1uwkIuYDewHfB9YBD0vql00et1k2Ad7OwC1A31r7N2szDgmz4j40Q29EvA+8BnyZdMnTR4F+wO4F\nl27tBdRcBjVYPw6xwf4iYk1EjImI7wI/J419QAqe/yLNSvsoKSAOy17PrE05JMzWmwQMldQ1aykc\nV2S9R4ELsvUnA+cC0wCyCxfNjPUzZ/6DNCUzpFlzydY7MOtGqrnO8P7AnFr7nwhMJ4VQTevGrE05\nJMwyETENuA14DniADVsDhR4Ftgcej4iFwGpSYEC6kEvhdOnfJl157VnSYHWNbYH7JD1HCoI1wJ8K\n9r8TMCki1gH/xl1NlhNPFW7WiiSNAc7KxhbMKp5DwszMinJ3k5mZFeWQMDOzohwSZmZWlEPCzMyK\nckiYmVlRDgkzMyvKIWFmZkX9f0bN8w7IkBBtAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10ef6fb50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0.50000000099999997"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = BuckleyLev()\n",
    "a.plot_fractional_flow()\n",
    "a.plot_fractional_flow_deriv()\n",
    "a.sw_at_shock_front()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def displacement_plot(self):\n",
    "    #using the shock front velocity, plot the displacement profile\n",
    "    v_sh = self.sw_at_shock_front()\n",
    "    \n",
    "    y = np.linspace(self.params[\"residual_w\"]+1e-3,(1-self.params[\"residual_o\"]+1e-3),50)\n",
    "    x = [self.fractional_flow_deriv(i) for i in y if self.fractional_flow_deriv(i)>v_sh ]\n",
    "   \n",
    "\n",
    "    return x\n",
    "BuckleyLev.displacement_plot = displacement_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def rarefaction_plot(self):\n",
    "    # it should calculate the shock velocity and the corresponding saturation which this occurs an\n",
    "    \n",
    "    #create dx window of increasing size for calculating welge\n",
    "    x = np.linspace(self.params[\"residual_w\"]+1e-3,(1-self.params[\"residual_o\"]+1e-3),50)\n",
    "    \n",
    "    maximum, sw_shock = 0,0\n",
    "    grads = []\n",
    "    \n",
    "    # to do - add flag to allow BL_time function to calcuate sw values from supplied Xd values\n",
    "    ## calculate welge gradient at each point until we find the max = shock velocity\n",
    "    \n",
    "    for swi in x:\n",
    "        grad = self.fractional_flow(swi)/(swi-self.params[\"residual_w\"]+1e-3)\n",
    "        # vd = xd/td\n",
    "        grads.append(grad)\n",
    "      \n",
    "        if grad>maximum:\n",
    "            sw_shock = swi\n",
    "            maximum = grad\n",
    "         \n",
    "    #find the position of the shock velocity in the grads array and slice to this point for the rarefaction \n",
    "    #plus one to include the actual shock velocity. Reverse to get the values in the right order\n",
    "    rarefaction = (grads[:([i for i,j in enumerate(grads) if j == maximum][0]+1)])\n",
    "    rarefaction.sort(reverse=True)\n",
    "\n",
    "    y = x[:(len(rarefaction))]\n",
    "    \n",
    "    #save calculated grads to instance \n",
    "    print(rarefaction[0])\n",
    "    for v in rarefaction:\n",
    "        self.params['vd_array'].append(v)\n",
    "        \n",
    "    #plot rarefaction part \n",
    "    plt.plot(rarefaction,y,'b',lw=2)\n",
    "    \n",
    "    #highlight vshock point\n",
    "    plt.plot(rarefaction[0],y[0],'ro')\n",
    "    \n",
    "    #add the part ahead of the shock front\n",
    "    plt.vlines(rarefaction[0],y[0],self.params[\"initial_sw\"],'b',lw=2)\n",
    "    plt.hlines(self.params[\"initial_sw\"],rarefaction[0],rarefaction[0]+1,'b',lw=2)\n",
    "\n",
    "    #add saturation lines\n",
    "    plt.hlines(self.params[\"initial_sw\"],0,rarefaction[0],linestyles='dashed',lw=2,colors='0.4')\n",
    "    plt.hlines(y[0],0,rarefaction[0],linestyles='dashed',lw=2, colors='0.4')\n",
    "    plt.vlines(rarefaction[0],-2,self.params[\"initial_sw\"],linestyles='dashed',lw=2, colors='0.4')\n",
    "\n",
    "    # add annotations\n",
    "    plt.annotate('V shock',xy=(rarefaction[0]+0.02,y[0]+0.02))\n",
    "    plt.annotate('Sw f',xy=(0+0.04,y[0]-0.05))\n",
    "    plt.annotate('Sw i',xy=(0+0.04,self.params[\"initial_sw\"]-0.05))\n",
    "    \n",
    "    \n",
    "    #ad vdmin if the min velocity values is not zero \n",
    "    if (rarefaction[len(rarefaction)-1]>0.001):\n",
    "        plt.hlines(y[len(y)-1],0,rarefaction[len(rarefaction)-1],'b',lw=2)\n",
    "        plt.plot(rarefaction[len(rarefaction)-1],y[len(y)-1],'ro')\n",
    "        plt.annotate('V min',xy=((rarefaction[len(rarefaction)-1]+0.08),(y[len(y)-1])))\n",
    "        plt.vlines(rarefaction[len(rarefaction)-1],y[len(y)-1],0,linestyles='dashed',lw=2, colors='0.4')\n",
    "        plt.annotate('Sw c',xy=(0+0.04,1-self.params[\"residual_o\"]+0.03))\n",
    "\n",
    "    plt.xlabel('Dimensionless Velocity, Vd = xd/td')\n",
    "    plt.ylabel('Saturation')\n",
    "    \n",
    "    plt.ylim([0,1])\n",
    "    plt.xlim([0,rarefaction[0]+1])\n",
    "    plt.title('Saturation profile velocity')\n",
    "    plt.show()\n",
    "    \n",
    "    \n",
    "BuckleyLev.rarefaction_plot = rarefaction_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.43676913973\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nU1uUewdgZve5+6/N7BVC3z87cfdzUhlcXCy6A5CkucP69aExumRYuXLn8ZUrYdOmireVnx/etG7e\nPCSEREPz5uHHfSSx9evX065dOz799FPy8/NZvnw5J598Mp988slO5TZt2sTFF1/MqlWr2LZtG7fd\ndhsXXXQRrVq14vLLL+eVV15h69atPP/88xx66KGsX7+eq666io8//piCggJGjhxJhw4d2LhxI4MG\nDWLWrFnUqVOHoUOHct55522/A/jyyy8555xzuO222zj99NPT86HUkKrcAZTU+SeXpmuhXHkPoLYx\nC4+aNm4MHcvostA9vBi3alVICvF/S8bXrt2RMMrToMGOJJHob/PmofG6bg6+SrnXXnvRpUsXJkyY\nwNlnn83YsWO5+OKLS5V77bXXaNGiBa+++irATtU1++yzD7Nnz+aRRx7h3nvvZdSoUQwdOpSjjz6a\nF198kXfeeYcBAwYwd+5c7rjjDho1asT8+fMB+Prr0JONmVFcXMw555zDf//3f9OjR48aOPrMVW4C\ncPfZ0ehR7n5/7DIzux6YVHotkexgFh43bdQovC1dlu+/D+88rFqVeFi9Ovz95pswJHovItbee+9I\nCGUN++wT7jxqk759+zJ27NjtCeCJJ54oVaZDhw7ccMMN3HLLLZx55pmcdNJJ25edd1545qRz5868\n+OKLAEydOpUXXngBgFNOOYV169axYcMG3nzzTZ577rnt6zZs2BCAzZs306tXLx5++GG6deuWsmPN\nFsn+E7scuD9u3hUJ5onUOrvvvuN9hbKUVDmVJISSpFDyd82aMP7ZZ6EB+4svYN68srdXp05IAomS\nQ0l1VPPmIZlkS3ccffr0YfDgwcydO5fvvvuOTp06lSpzyCGHMGfOHMaPH8+QIUPo1asXQ4YMAaBe\nvXoA5OXlsXXr1jL3U149f35+Pp07d+a1115TAqCCBGBm/YBLgVZm9nLMovrAulQGJpJNYqucOnQo\nu9y2beHiX5IkYpNFSZJYvRqKi0Oy+Oyz0L13WfLyQrVSbIKIf6lun30y40mngoICCgsLueqqq+jX\nr1/CMmvWrKFx48ZceumlNGzYkMcff7zcbXbr1o1nnnmGIUOGMHHiRJo2bcqee+5J7969efjhh/nj\nH0N/lV999RWNGjXCzHjiiSe48MILufvuu7npppuq/TizSUV3AO8S+vFvCvxPzPwNhO6bRaQSSi7Y\n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\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1102146d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('hereh', 0.12037124871200518)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.50000000099999997"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = BuckleyLev()\n",
    "a.rarefaction_plot()\n",
    "a.sw_at_shock_front()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nPn269+rVK7ZtE4nL5MnuAwe6t2nj/r//6z5/ftIRxSP67qzT926etZblh/POO48PPviAwYMHc/PN\nN9OzZ0/WrFkDQKtWrfjLX/4CwBlnnMHEiRM3e+2UKVMoKSnhhBNOoEuXLlx++eU88sgj9OrViwMO\nOIAPP/wQgHHjxtG7d2+++c1vMmDAAD777DMALr74Yq6++moAxo8fn9XN1/v160ezZs1qLDN27FjO\nOOMMAIYNG8akSZOq1jFgwACaN2/OLrvswoABA3j++ecBmDRpEt/5zneqtvWpp56qWtYPfvADAHr1\n6sXq1atZtmxZrXGK5IPXX4djjoFzzoGTT4aPPoLf/S70K8jmlCDSuPPOO2nXrh2lpaVcfPHF9OnT\nh6lTp/Luu+/SuXPnqlPMpk2bxhFHHLHF62fNmsXo0aOZPXs2Dz/8MPPnz+ff//43Z511Fn/6058A\nOPLII5k+fTozZ87klFNO4frrrwfg2muv5dFHH6W0tJSLLrqIBx54AIBnnnmGUaNG1XmblixZwp57\nhhPGGjduTPPmzVmxYsVm8wHatWvHkiVLWL58OS1atKBR1OPWvn17lixZssWyUl8jks/WrIGf/hSG\nDIFhw2D2bPjRj8JZRZJe0qe55i3/qmmLPn36MGXKFDp27Mi5557LPffcw9KlS2nZsiU77LDDFq89\n9NBD2X333QHo3LkzAwYMAGD//fentLQUgEWLFnHyySfzn//8h7KyMjp16gTADjvswOjRo+nbty+3\n3HILe+21FwBDhw5l6NCh9bp99VFGpBBMmQJnnAHf+lZIDC1bJh1RYVANIgt9+/bl5Zdf5pVXXqFf\nv360atWKxx9/nCOPPDJt+e1TfpI0atSoarpRo0ZVHb0XXHABF154IbNmzeKuu+5i/fr1Va+ZNWsW\nrVq1qtdf5e3bt2fRojBovby8nDVr1tCyZUvatWu3WYf14sWLadeuHbvuuiurV6+moqJis/kQagyV\ny6r+nEg+cYdrr4VTT4Xbb4d77lFy2BpKEFlo3749n3/+OfPnz2evvfaiT58+3HDDDfTt27fOy1yz\nZk3VQL8HH3ywav7ChQu56aabeOONN3juued49dVXs1peao0nnaFDh1at57HHHqN///4ADBw4kAkT\nJrB69WpWrlzJhAkTGDgwXF+xX79+PPbYY1UxHn/88QAcd9xxVWc7TZ8+nV122YXWrXUJLckv69fD\n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\niKT1/xR6TjWqiklNAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1104ee310>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.999999777157\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1104ee290>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a.plot_fractional_flow()\n",
    "a.plot_fractional_flow_deriv()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def porevols_plot(self):\n",
    "    #it should calculate the number of pore volumes injected and plot against td\n",
    "    \n",
    "    #calculate pore volumes injected\n",
    "    Pvi, Swbar = [], []\n",
    "    for v in self.params['vd_array']:\n",
    "        pvi.append(1./v)\n",
    "        \n",
    "    #calculate average water sats\n",
    "    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def BL_time_sol(self,time):\n",
    "    #it should return a function that returns water saturations when supplied by xd values\n",
    "    # time is in days\n",
    "    # q is volumetric flux rate in m3/day.m2\n",
    "    # A is cross sectional area in m2\n",
    "    # poro is frac\n",
    "    \n",
    "            #grad = self.fractional_flow(swi)/(swi-self.params[\"residual_w\"]+1e-3)\n",
    "    \n",
    "    sw_at_front = self.sw_at_shock_front()\n",
    "    sw_deriv_at_front = self.fractional_flow_deriv(sw_at_front)\n",
    "    print('sw_atfront',(sw_at_front))\n",
    "    print('vel at front',sw_deriv_at_front)\n",
    "    #calculate the td based on the time\n",
    "    td = (time*self.params['inject_rate'])/self.params['poro']*self.params['x-area']\n",
    "    \n",
    "    #then use this to calculate the xd at shock front by x with dfw/dsw\n",
    "    xd_shock = sw_deriv_at_front*td\n",
    "\n",
    "    print('xd_shock',xd_shock)\n",
    "    #now work backwards, calculate xd values for each water saturation \n",
    "    \n",
    "    #setup the water saturation array \n",
    "    y = np.arange(1.-self.params[\"residual_o\"],sw_at_front,-0.001)\n",
    "    \n",
    "    \n",
    "    np.append(y,sw_at_front)\n",
    "    #y.append(sw_at_front)\n",
    "    #print('y',y)\n",
    "    \n",
    "    x = [self.fractional_flow_deriv(sw) for sw in y]\n",
    "    #multiply by td to account for time\n",
    "\n",
    "    x2 = [xi*td for xi in x]\n",
    "  \n",
    "    \n",
    "    #interpolate will return a function that returns a y for a given x, note x must be monotomically increasing\n",
    "    #print('x',x,'y',y)\n",
    "    sat_behind_front = interpolate.interp1d(sorted(x2),y)\n",
    "    \n",
    "    #return the function to be called later, note check to see if we are behind the shock front at the given x\n",
    "    def saturation_at_xd(xd):\n",
    "        if xd<xd_shock:\n",
    "            return sat_behind_front(xd)\n",
    "        else:\n",
    "            return self.params['initial_sw']\n",
    "        \n",
    "    return (saturation_at_xd)\n",
    "\n",
    "BuckleyLev.BL_time_sol = BL_time_sol\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('sw_atfront', 0.50000000099999997)\n",
      "('vel at front', 0.12037124871200518)\n",
      "('xd_shock', 2.4367691397348614)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.2"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = BuckleyLev()\n",
    "b = a.BL_time_sol(3)\n",
    "\n",
    "b(980)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.50000000099999997"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.sw_at_shock_front()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
